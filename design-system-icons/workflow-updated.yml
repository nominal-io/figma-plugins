name: "Design system: Add icons"

on:
  workflow_dispatch:
    inputs:
      icons:
        description: "JSON array of icons with name and svg properties"
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  add-icons:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.17.1"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.9.0"

      - name: Parse and validate icons input
        id: parse
        run: |
          # Try to detect if input is base64 encoded or raw JSON
          INPUT='${{ github.event.inputs.icons }}'

          # Check if input looks like base64 (no quotes, mostly alphanumeric)
          if echo "$INPUT" | grep -q '^[A-Za-z0-9+/]*={0,2}$' && [ ${#INPUT} -gt 100 ]; then
            echo "üì¶ Detected base64 input, decoding..."
            echo "$INPUT" | base64 -d > icons.json
          else
            echo "üìÑ Detected raw JSON input, using directly..."
            echo "$INPUT" > icons.json
          fi

          # Debug: Show file size and first few characters
          echo "üìÑ JSON file size: $(wc -c < icons.json) bytes"
          echo "üìÑ First 100 characters:"
          head -c 100 icons.json
          echo ""

          if ! jq empty icons.json 2>/dev/null; then
            echo "‚ùå Invalid JSON input"
            echo "Raw input:"
            cat icons.json
            exit 1
          fi

          # Count icons
          ICON_COUNT=$(jq length icons.json)
          echo "üìä Found $ICON_COUNT icons to process"

          # Validate each icon has required fields
          while read icon; do
            NAME=$(echo "$icon" | jq -r '.name // empty')
            SVG=$(echo "$icon" | jq -r '.svg // empty')
            
            if [ -z "$NAME" ] || [ -z "$SVG" ]; then
              echo "‚ùå Icon missing required fields (name or svg): $icon"
              exit 1
            fi
          done < <(jq -c '.[]' icons.json)

          echo "‚úÖ All icons validated successfully"

      - name: Prepare icon list
        id: icon-list
        run: |
          ICON_LIST=$(jq -r '.[] | "- `\(.name)`"' icons.json)
          echo "list<<EOF" >> $GITHUB_OUTPUT
          echo "$ICON_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create branch
        id: branch
        run: |
          BRANCH_NAME="add-icons-$(date +%s)"
          git checkout -b "$BRANCH_NAME"
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "üåø Created branch: $BRANCH_NAME"

      - name: Write icons to package
        id: write-icons
        run: |
          # Ensure icons directory exists
          mkdir -p design/icons/src/icons

          # Initialize counters
          ADDED_COUNT=0
          SKIPPED_COUNT=0
          UPDATED_COUNT=0

          # Process each icon
          while read icon; do
            NAME=$(echo "$icon" | jq -r '.name')
            SVG=$(echo "$icon" | jq -r '.svg')
            
            # Ensure name ends with 'Icon' suffix
            if [[ ! "$NAME" =~ Icon$ ]]; then
              NAME="${NAME}Icon"
            fi
            
            # Convert name to kebab-case for filename (remove Icon suffix first)
            BASE_NAME=$(echo "$NAME" | sed 's/Icon$//')
            FILENAME=$(echo "$BASE_NAME" | sed 's/\([A-Z]\)/-\1/g' | sed 's/^-//' | tr '[:upper:]' '[:lower:]')
            
            # Check if file already exists
            if [ -f "design/icons/src/icons/$FILENAME.svg" ]; then
              # Check if content is different
              if ! echo "$SVG" | diff -q "design/icons/src/icons/$FILENAME.svg" - > /dev/null 2>&1; then
                echo "$SVG" > "design/icons/src/icons/$FILENAME.svg"
                echo "  üîÑ Updated $FILENAME.svg (content changed)"
                UPDATED_COUNT=$((UPDATED_COUNT + 1))
              else
                echo "  ‚è≠Ô∏è  Skipped $FILENAME.svg (already exists with same content)"
                SKIPPED_COUNT=$((SKIPPED_COUNT + 1))
              fi
            else
              echo "$SVG" > "design/icons/src/icons/$FILENAME.svg"
              echo "  ‚úì Added $FILENAME.svg"
              ADDED_COUNT=$((ADDED_COUNT + 1))
            fi
          done < <(jq -c '.[]' icons.json)

          echo "üìÅ Icon processing complete:"
          echo "  ‚úì Added: $ADDED_COUNT"
          echo "  üîÑ Updated: $UPDATED_COUNT" 
          echo "  ‚è≠Ô∏è  Skipped: $SKIPPED_COUNT"

          # Output counters for next steps
          echo "added_count=$ADDED_COUNT" >> $GITHUB_OUTPUT
          echo "updated_count=$UPDATED_COUNT" >> $GITHUB_OUTPUT
          echo "skipped_count=$SKIPPED_COUNT" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: |
          pnpm install --frozen-lockfile

      - name: Build icons and design system
        run: |
          # Build icons package
          echo "üî® Building icons package..."
          pnpm --filter @nominal-io/icons run build:generate-icons

          # Generate React components for design system
          echo "‚öõÔ∏è  Generating React components..."
          pnpm --filter @nominal-io/design-system run generate:icons

          # Build design system
          echo "üèóÔ∏è  Building design system..."
          pnpm --filter @nominal-io/design-system run build:js
          pnpm --filter @nominal-io/design-system run build:types

      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if there are changes to commit
          if git diff --staged --quiet && git diff --quiet; then
            echo "‚ÑπÔ∏è  No changes to commit (all icons were duplicates or already up-to-date)"
            exit 0
          fi

          # Get summary from previous step
          ADDED_COUNT="${{ steps.write-icons.outputs.added_count }}"
          UPDATED_COUNT="${{ steps.write-icons.outputs.updated_count }}"
          SKIPPED_COUNT="${{ steps.write-icons.outputs.skipped_count }}"

          git add .
          git commit -m "Add icons from Figma

          - Added: $ADDED_COUNT new icons
          - Updated: $UPDATED_COUNT existing icons  
          - Skipped: $SKIPPED_COUNT duplicates
          - Generated React components in design-system
          - Updated icon exports and types

          Icons processed:
          $(jq -r '.[] | "- \(.name)"' icons.json)"

          git push origin "${{ steps.branch.outputs.branch }}"
          echo "‚úÖ Changes committed and pushed"

      - name: Create pull request
        run: |
          gh pr create \
            --base main \
            --head "${{ steps.branch.outputs.branch }}" \
            --title "Add icons from Figma" \
            --body "This PR processes icons from the Figma plugin.
            
            **Summary:**
            - ‚úÖ **Added:** ${{ steps.write-icons.outputs.added_count }} new icons
            - üîÑ **Updated:** ${{ steps.write-icons.outputs.updated_count }} existing icons  
            - ‚è≠Ô∏è **Skipped:** ${{ steps.write-icons.outputs.skipped_count }} duplicates
            
            **Changes:**
            - Added/updated SVG files in \`design/icons/src/icons/\`
            - Generated React components in \`design-system\`
            - Updated icon exports and TypeScript types
            - Ensured all icon names end with 'Icon' suffix
            - Detected and skipped duplicate icons
            
            **Icons processed:**
            ${{ steps.icon-list.outputs.list }}
            
            ---
            
            *This PR was automatically created by the Figma plugin workflow.*"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
